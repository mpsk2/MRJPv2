-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Latte.Par where
import Latte.Abs
import Latte.Lex
import Latte.ErrM

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '%' { PT _ (TS _ 3) }
  '&&' { PT _ (TS _ 4) }
  '(' { PT _ (TS _ 5) }
  ')' { PT _ (TS _ 6) }
  '*' { PT _ (TS _ 7) }
  '+' { PT _ (TS _ 8) }
  '++' { PT _ (TS _ 9) }
  ',' { PT _ (TS _ 10) }
  '-' { PT _ (TS _ 11) }
  '--' { PT _ (TS _ 12) }
  '/' { PT _ (TS _ 13) }
  ';' { PT _ (TS _ 14) }
  '<' { PT _ (TS _ 15) }
  '<=' { PT _ (TS _ 16) }
  '=' { PT _ (TS _ 17) }
  '==' { PT _ (TS _ 18) }
  '>' { PT _ (TS _ 19) }
  '>=' { PT _ (TS _ 20) }
  '[' { PT _ (TS _ 21) }
  ']' { PT _ (TS _ 22) }
  'boolean' { PT _ (TS _ 23) }
  'class' { PT _ (TS _ 24) }
  'else' { PT _ (TS _ 25) }
  'extends' { PT _ (TS _ 26) }
  'false' { PT _ (TS _ 27) }
  'if' { PT _ (TS _ 28) }
  'int' { PT _ (TS _ 29) }
  'return' { PT _ (TS _ 30) }
  'string' { PT _ (TS _ 31) }
  'struct' { PT _ (TS _ 32) }
  'true' { PT _ (TS _ 33) }
  'void' { PT _ (TS _ 34) }
  'while' { PT _ (TS _ 35) }
  '{' { PT _ (TS _ 36) }
  '||' { PT _ (TS _ 37) }
  '}' { PT _ (TS _ 38) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }
L_quoted { PT _ (TL $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
String  :: { String }  : L_quoted {  $1 }

Program :: { Program }
Program : ListTopDef { Latte.Abs.StandardProgram $1 }
TopDef :: { TopDef }
TopDef : Type Ident '(' ListArg ')' Block { Latte.Abs.FnDef $1 $2 $4 $6 }
       | 'struct' Ident '{' ListDecl '}' { Latte.Abs.StructDef $2 $4 }
       | 'class' Ident '{' Program '}' { Latte.Abs.ClassDef $2 $4 }
       | 'class' Ident 'extends' Ident '{' Program '}' { Latte.Abs.ClassExtDef $2 $4 $6 }
       | Decl { Latte.Abs.GlobalVar $1 }
ListTopDef :: { [TopDef] }
ListTopDef : TopDef { (:[]) $1 } | TopDef ListTopDef { (:) $1 $2 }
Arg :: { Arg }
Arg : Type Ident { Latte.Abs.NoInitArg $1 $2 }
ListArg :: { [Arg] }
ListArg : {- empty -} { [] }
        | Arg { (:[]) $1 }
        | Arg ',' ListArg { (:) $1 $3 }
Block :: { Block }
Block : '{' ListStmt '}' { Latte.Abs.ParenBlock (reverse $2) }
ListStmt :: { [Stmt] }
ListStmt : {- empty -} { [] } | ListStmt Stmt { flip (:) $1 $2 }
Stmt :: { Stmt }
Stmt : ';' { Latte.Abs.Empty }
     | Block { Latte.Abs.BStmt $1 }
     | Decl ';' { Latte.Abs.SDecl $1 }
     | Ident '=' Expr ';' { Latte.Abs.Ass $1 $3 }
     | Ident '++' ';' { Latte.Abs.Incr $1 }
     | Ident '--' ';' { Latte.Abs.Decr $1 }
     | 'return' Expr ';' { Latte.Abs.Ret $2 }
     | 'return' ';' { Latte.Abs.VRet }
     | 'if' '(' Expr ')' Stmt { Latte.Abs.Cond $3 $5 }
     | 'if' '(' Expr ')' Stmt 'else' Stmt { Latte.Abs.CondElse $3 $5 $7 }
     | 'while' '(' Expr ')' Stmt { Latte.Abs.While $3 $5 }
     | Expr ';' { Latte.Abs.SExp $1 }
Decl :: { Decl }
Decl : Type ListItem { Latte.Abs.Decl $1 $2 }
ListDecl :: { [Decl] }
ListDecl : Decl { (:[]) $1 } | Decl ';' ListDecl { (:) $1 $3 }
Item :: { Item }
Item : Ident { Latte.Abs.NoInit $1 }
     | Ident '=' Expr { Latte.Abs.Init $1 $3 }
ListItem :: { [Item] }
ListItem : Item { (:[]) $1 } | Item ',' ListItem { (:) $1 $3 }
Type :: { Type }
Type : 'int' { Latte.Abs.Int }
     | 'string' { Latte.Abs.Str }
     | 'boolean' { Latte.Abs.Bool }
     | 'void' { Latte.Abs.Void }
     | Type '[' Expr ']' { Latte.Abs.Array $1 $3 }
ListType :: { [Type] }
ListType : {- empty -} { [] }
         | Type { (:[]) $1 }
         | Type ',' ListType { (:) $1 $3 }
Expr6 :: { Expr }
Expr6 : '{' ListExpr '}' { Latte.Abs.EArrayVal $2 }
      | Expr6 '[' Expr ']' { Latte.Abs.EArrayAt $1 $3 }
      | Ident { Latte.Abs.EVar $1 }
      | Integer { Latte.Abs.ELitInt $1 }
      | 'true' { Latte.Abs.ELitTrue }
      | 'false' { Latte.Abs.ELitFalse }
      | Ident '(' ListExpr ')' { Latte.Abs.EApp $1 $3 }
      | String { Latte.Abs.EString $1 }
      | '(' Expr ')' { $2 }
Expr5 :: { Expr }
Expr5 : '-' Expr6 { Latte.Abs.Neg $2 }
      | '!' Expr6 { Latte.Abs.Not $2 }
      | Expr6 { $1 }
Expr4 :: { Expr }
Expr4 : Expr4 MulOp Expr5 { Latte.Abs.EMul $1 $2 $3 }
      | Expr5 { $1 }
Expr3 :: { Expr }
Expr3 : Expr3 AddOp Expr4 { Latte.Abs.EAdd $1 $2 $3 }
      | Expr4 { $1 }
Expr2 :: { Expr }
Expr2 : Expr2 RelOp Expr3 { Latte.Abs.ERel $1 $2 $3 }
      | Expr3 { $1 }
Expr1 :: { Expr }
Expr1 : Expr2 '&&' Expr1 { Latte.Abs.EAnd $1 $3 } | Expr2 { $1 }
Expr :: { Expr }
Expr : Expr1 '||' Expr { Latte.Abs.EOr $1 $3 } | Expr1 { $1 }
ListExpr :: { [Expr] }
ListExpr : {- empty -} { [] }
         | Expr { (:[]) $1 }
         | Expr ',' ListExpr { (:) $1 $3 }
AddOp :: { AddOp }
AddOp : '+' { Latte.Abs.Plus } | '-' { Latte.Abs.Minus }
MulOp :: { MulOp }
MulOp : '*' { Latte.Abs.Times }
      | '/' { Latte.Abs.Div }
      | '%' { Latte.Abs.Mod }
RelOp :: { RelOp }
RelOp : '<' { Latte.Abs.LTH }
      | '<=' { Latte.Abs.LE }
      | '>' { Latte.Abs.GTH }
      | '>=' { Latte.Abs.GE }
      | '==' { Latte.Abs.EQU }
      | '!=' { Latte.Abs.NE }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

